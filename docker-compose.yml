
services:
  backend:
    build: .
    container_name: agritalk-backend
    ports:
      - "5000:5000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - .:/app
    restart: always
    command: ./run.sh

  db:
    image: postgres:15
    container_name: postgres-db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: agritalk-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping", "--raw"]
      interval: 5s
      timeout: 5s
      retries: 5

  celery-worker:
    build: .
    container_name: agritalk-celery-worker
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - .:/app
    restart: always
    command: ./run_celery.sh

  celery-beat:
    build: .
    container_name: agritalk-celery-beat
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - .:/app
    restart: always
    command: celery -A app.services.celery_service.celery worker --pool=solo --loglevel=info

  migrations:
    build: .
    container_name: agritalk-migrations
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - .:/app
    restart: on-failure
    command: ./run_migrations.sh

volumes:
  db_data:
  redis_data: